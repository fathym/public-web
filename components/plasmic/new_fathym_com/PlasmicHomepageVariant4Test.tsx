// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jbURxL3XuiMBQsLhf7apui
// Component: yxCymkLmDta
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: C-c1_GprIs0E/component
import Button from "../../Button"; // plasmic-import: PDN2xmv-0aRn/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import PriceCard from "../../PriceCard"; // plasmic-import: WPq9gUgwYyDn/component
import ValueProp from "../../ValueProp"; // plasmic-import: w1ZnbKd31u0d/component
import FathymFooter from "../../FathymFooter"; // plasmic-import: 3jTJ0D37Jf/component

import { useScreenVariants as useScreenVariantsbzFq34BwReL2 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: BzFq34bwReL2/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_new_fathym_com.module.css"; // plasmic-import: jbURxL3XuiMBQsLhf7apui/projectcss
import sty from "./PlasmicHomepageVariant4Test.module.css"; // plasmic-import: yxCymkLmDta/css

import AppleIcon from "./icons/PlasmicIcon__Apple"; // plasmic-import: lodHYqINbTbi/icon
import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: gpmIqNjGKjYR/icon
import CheckIcon from "./icons/PlasmicIcon__Check"; // plasmic-import: B6LQdT961rE8/icon

export type PlasmicHomepageVariant4Test__VariantMembers = {};

export type PlasmicHomepageVariant4Test__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepageVariant4Test__VariantsArgs;
export const PlasmicHomepageVariant4Test__VariantProps =
  new Array<VariantPropType>();

export type PlasmicHomepageVariant4Test__ArgsType = {};
type ArgPropType = keyof PlasmicHomepageVariant4Test__ArgsType;
export const PlasmicHomepageVariant4Test__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepageVariant4Test__OverridesType = {
  root?: p.Flex<"div">;
  navbar?: p.Flex<typeof Navbar>;
  learnMore?: p.Flex<"a"> & Partial<LinkProps>;
  section?: p.Flex<"section">;
  foreground3?: p.Flex<"div">;
  fathymFooter?: p.Flex<typeof FathymFooter>;
};

export interface DefaultHomepageVariant4TestProps {}

function PlasmicHomepageVariant4Test__RenderFunc(props: {
  variants: PlasmicHomepageVariant4Test__VariantsArgs;
  args: PlasmicHomepageVariant4Test__ArgsType;
  overrides: PlasmicHomepageVariant4Test__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbzFq34BwReL2()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">
          {"Fathym - Develop & Deploy modern web experiences with your team"}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={
            "Fathym - Develop & Deploy modern web experiences with your team"
          }
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={
            "Fathym - Develop & Deploy modern web experiences with your team"
          }
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_library_plasmic_color_type_css.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <div className={classNames(projectcss.all, sty.freeBox___7UQa2)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___8EjsP)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__lhcPb)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__ueoJi)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns__cHpcG)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__fH8Hb)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sjnqj
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__v3S2J
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__iNzup
                            )}
                          >
                            {hasVariant(
                              globalVariants,
                              "screen",
                              "mobileOnly"
                            ) ? (
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ color: "#000000" }}
                                >
                                  {"Host different tech stacks "}
                                </span>
                                <React.Fragment>{"\n"}</React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ color: "#5F7AE6" }}
                                >
                                  {"under one domain."}
                                </span>
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ color: "#000000" }}
                                >
                                  {"Host different "}
                                </span>
                                <React.Fragment>{"\n"}</React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ color: "#000000" }}
                                >
                                  {"tech stacks "}
                                </span>
                                <React.Fragment>{"\n"}</React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ color: "#5F7AE6" }}
                                >
                                  {"under one domain."}
                                </span>
                              </React.Fragment>
                            )}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__jRpqa
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>
                                {"Ditch your subdomains with "}
                              </React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "#000000" }}
                              >
                                {"Fathym"}
                              </span>
                              <React.Fragment>
                                {
                                  " and bring everything together under one roof."
                                }
                              </React.Fragment>
                            </React.Fragment>
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__taCxy
                            )}
                          >
                            {"Your Code. Low Code. No Code."}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.columns__gJiO
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column___31Wag
                              )}
                            >
                              <Button
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__lGWiU
                                )}
                                color={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? ("blue" as const)
                                    : ("blue" as const)
                                }
                                endIcon={
                                  <ChevronRightIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__nyDyi
                                    )}
                                    role={"img"}
                                  />
                                }
                                link={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? ("/dashboard/create-project" as const)
                                    : ("/dashboard" as const)
                                }
                                showEndIcon={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? true
                                    : true
                                }
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___8DbIu
                                  )}
                                >
                                  {"Get Started for Free"}
                                </div>
                              </Button>
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__qiz1M
                              )}
                            >
                              <p.PlasmicLink
                                data-plasmic-name={"learnMore"}
                                data-plasmic-override={overrides.learnMore}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  sty.learnMore
                                )}
                                component={Link}
                                href={"/docs" as const}
                                platform={"nextjs"}
                                target={"_blank" as const}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__dvtY
                                  )}
                                >
                                  {"Learn more >"}
                                </div>
                              </p.PlasmicLink>
                            </div>
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__vqVeV)}
                    >
                      <Reveal
                        big={false}
                        className={classNames(
                          "__wab_instance",
                          sty.reveal__jqUyn
                        )}
                        direction={"right" as const}
                        triggerOnce={true}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__pQffN)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/new_fathym_com/images/mfeTree10Sgif.gif",
                            fullWidth: 600,
                            fullHeight: 600,
                            aspectRatio: undefined
                          }}
                        />
                      </Reveal>
                    </div>
                  </p.Stack>
                </div>
              </p.Stack>
            </p.Stack>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__jj3Wb)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__iwXgK)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__c1IZ8)}>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__nQqtK
                  )}
                >
                  {"Flashup today, scale tomorrow"}
                </h2>
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__l3W7T
                )}
              >
                {
                  '"Life moves pretty fast. If you don\'t stop and look around once in a while, you could miss it." - Ferris Bueller\nIncrease the tempo of development, adoption of new strategies, and get more out of your time.'
                }
              </div>
            </p.Stack>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__fFy1H)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__z3ZVw
              )}
            >
              {"TAKE THE FATHYM JOURNEY"}
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__wz4Nt)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__xPbjT)}
            >
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__ipBrh
                )}
              >
                {"1. Start with your skills"}
              </h1>

              <div className={classNames(projectcss.all, sty.columns__nRrcw)}>
                <div className={classNames(projectcss.all, sty.column__a28Lt)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6OBHq
                    )}
                  >
                    {
                      "Developers love the frameworks they love. No matter the framework, Fathym has you covered.  Deploy with micro frontends to seamlessly use the right frameworks for the right job."
                    }
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.column__eemoR)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cBmoy
                    )}
                  >
                    {
                      "Non-developers need a way to showcase their own skills. Whether a photo gallery, blog, or simple web presence, utilize Fathym to combine proven open source solutions and bring your ideas to life."
                    }
                  </div>
                </div>
              </div>

              <div className={classNames(projectcss.all, sty.columns__kkO5C)}>
                <div className={classNames(projectcss.all, sty.column__sbZL)}>
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal___0RwOr)}
                    direction={"left" as const}
                    triggerOnce={false}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__beqKr)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/new_fathym_com/images/homeYourCodepng.png",
                        fullWidth: 400,
                        fullHeight: 400,
                        aspectRatio: undefined
                      }}
                    />
                  </Reveal>
                </div>

                <div className={classNames(projectcss.all, sty.column__xj3Z)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___1LtUd)}
                  >
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__hzQ3C
                      )}
                    >
                      {"Your code"}
                    </h3>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nAt2U
                      )}
                    >
                      {
                        "Bring your sites and applications that you already have in GitHub or NPM."
                      }
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__cgPKg)}
                  >
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__aa7GH
                      )}
                    >
                      {"Build and deploy"}
                    </h3>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0Vvkv
                      )}
                    >
                      {
                        "Automate devops processes behind the scenes so you get back to the good stuff."
                      }
                    </div>
                  </div>

                  <Button
                    className={classNames("__wab_instance", sty.button__cw9PB)}
                    color={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("blue" as const)
                        : ("blue" as const)
                    }
                    endIcon={
                      <ChevronRightIcon
                        className={classNames(projectcss.all, sty.svg__s53QY)}
                        role={"img"}
                      />
                    }
                    link={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("/dashboard/create-project" as const)
                        : ("/dashboard" as const)
                    }
                    showEndIcon={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mnXJ
                      )}
                    >
                      {"Get Started for Free"}
                    </div>
                  </Button>
                </div>
              </div>
            </p.Stack>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__puYvk)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__s5X5S)}
            >
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__ffuy5
                )}
              >
                {"2. Use your team to do more"}
              </h1>

              {true ? (
                <div className={classNames(projectcss.all, sty.columns__g2SP)}>
                  <div
                    className={classNames(projectcss.all, sty.column__zmwIv)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rCeDk
                      )}
                    >
                      {
                        "Keeping up with the ebb and flow of technology is a daunting task for teams. Get more than the sum of your parts, leverage Fathym to automate your team workflows."
                      }
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__xkibU)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gg2U8
                      )}
                    >
                      {
                        "Take your experience and coding skills to new heights. Fathym will help you develop low-code solutions that enable junior and mid-                          level developers to accelerate."
                      }
                    </div>
                  </div>
                </div>
              ) : null}
              {true ? (
                <div className={classNames(projectcss.all, sty.columns__uvQMu)}>
                  <div className={classNames(projectcss.all, sty.column__drMo)}>
                    <Reveal
                      className={classNames(
                        "__wab_instance",
                        sty.reveal__sJaVo
                      )}
                      direction={"left" as const}
                      triggerOnce={false}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__nfmLz)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/new_fathym_com/images/homeLowCodepng2.png",
                          fullWidth: 400,
                          fullHeight: 400,
                          aspectRatio: undefined
                        }}
                      />
                    </Reveal>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__rlvGe)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__tsCbx)}
                    >
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__pe58I
                        )}
                      >
                        {"Low code"}
                      </h3>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__t5Apn
                        )}
                      >
                        {
                          "Use existing open source solutions or turn your code into reusable building blocks."
                        }
                      </div>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__vmy18)}
                    >
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__iWcgb
                        )}
                      >
                        {"Flashups"}
                      </h3>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dunhp
                        )}
                      >
                        {
                          "Micro frontend applications make it simple to create your business in a day."
                        }
                      </div>
                    </div>

                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__ibAnn
                      )}
                      color={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ("blue" as const)
                          : ("blue" as const)
                      }
                      endIcon={
                        <ChevronRightIcon
                          className={classNames(projectcss.all, sty.svg__hgXj)}
                          role={"img"}
                        />
                      }
                      link={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ("/dashboard/create-project" as const)
                          : ("/dashboard" as const)
                      }
                      showEndIcon={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : true
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jEu8W
                        )}
                      >
                        {"Get Started for Free"}
                      </div>
                    </Button>
                  </div>
                </div>
              ) : null}

              <div className={classNames(projectcss.all, sty.columns__sVgb7)}>
                <div className={classNames(projectcss.all, sty.column__gJoz)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__rKZwJ
                    )}
                  >
                    {"Compose Applications"}
                  </h2>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__e5U
                    )}
                  >
                    {
                      "Fathym micro frontends are a powerful tool that allow your team to use the frameworks best fit for the job.  Break free from monolithic, use open source and custom code in harmony."
                    }
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.column__em8Up)}>
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__w7Nc6)}
                    direction={"right" as const}
                    triggerOnce={false}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__boiYl)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/new_fathym_com/images/frameworksStacksvg.svg",
                        fullWidth: 182,
                        fullHeight: 150,
                        aspectRatio: 1.212121
                      }}
                    />
                  </Reveal>
                </div>
              </div>

              <div className={classNames(projectcss.all, sty.columns__qLi5Y)}>
                <div className={classNames(projectcss.all, sty.column__ow5N)}>
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__pPWl9)}
                    direction={"left" as const}
                    triggerOnce={false}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__lj4LV)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"483px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/new_fathym_com/images/deployCyclesvg.svg",
                        fullWidth: 150,
                        fullHeight: 150,
                        aspectRatio: 1
                      }}
                    />
                  </Reveal>
                </div>

                <div className={classNames(projectcss.all, sty.column__ki9U0)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2___525Bo
                    )}
                  >
                    {"Engage Users"}
                  </h2>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lyvv8
                    )}
                  >
                    {
                      "Don't wait weeks and months, take hours. Build engaging user experiences that Flashup your idea. Learn from your users and rapidly react with solutions to their problems."
                    }
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nJpz
                    )}
                  >
                    {"\n\n\n"}
                  </div>
                </div>
              </div>

              <div className={classNames(projectcss.all, sty.columns__kBqd)}>
                <div className={classNames(projectcss.all, sty.column___6CZTj)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__fMl10
                    )}
                  >
                    {"Enhance Experiences"}
                  </h2>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__obDxY
                    )}
                  >
                    {
                      "Augment your applications with low-code modifiers. Bring Google Tag Manager to every application, add support chat from your CRM, or develop custom enhancements yourself. Configure and manage from a central location across all applications.\n\n"
                    }
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.column__zWjGm)}>
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__zQd6T)}
                    direction={"right" as const}
                    triggerOnce={false}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__zXlhu)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/new_fathym_com/images/homeModifierpng.png",
                        fullWidth: 400,
                        fullHeight: 400,
                        aspectRatio: undefined
                      }}
                    />
                  </Reveal>
                </div>
              </div>
            </p.Stack>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__eWaAk)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__tIvr)}
            >
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1___7BH4L
                )}
              >
                {"3. Scale your solutions"}
              </h1>

              <div className={classNames(projectcss.all, sty.columns__dul9O)}>
                <div className={classNames(projectcss.all, sty.column__omMFq)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xBVu1
                    )}
                  >
                    {
                      "You no longer need a huge budget or months to get started. Flashup your business across shared infrastructure built to scale with you and your customer's needs."
                    }
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.column__vi1Ts)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8Sv9
                    )}
                  >
                    {
                      "Outgrown Fathym's shared infrastructure? Looking to bolster the value of your business? Employ all the same great tools from your own private or managed clouds."
                    }
                  </div>
                </div>
              </div>

              <div className={classNames(projectcss.all, sty.columns__jopg9)}>
                <div className={classNames(projectcss.all, sty.column___9T8C)}>
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__qKp3D)}
                    direction={"left" as const}
                    triggerOnce={false}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__k3SKu)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/new_fathym_com/images/homeNoCodepng3.png",
                        fullWidth: 400,
                        fullHeight: 400,
                        aspectRatio: undefined
                      }}
                    />
                  </Reveal>
                </div>

                <div className={classNames(projectcss.all, sty.column__rsLvB)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wphjr)}
                  >
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3___7DqoI
                      )}
                    >
                      {"No code"}
                    </h3>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1LbzR
                      )}
                    >
                      {
                        "Build tools that streamline productivity and bring value to your customers."
                      }
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox___4Vgl)}
                  >
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__npEmd
                      )}
                    >
                      {"Cloud scale"}
                    </h3>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mBcz0
                      )}
                    >
                      {
                        "Flashup on shared infrastructure, grow with your customers, scale as needed."
                      }
                    </div>
                  </div>

                  <Button
                    className={classNames("__wab_instance", sty.button__x1LeS)}
                    color={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("blue" as const)
                        : ("blue" as const)
                    }
                    endIcon={
                      <ChevronRightIcon
                        className={classNames(projectcss.all, sty.svg__hIcGb)}
                        role={"img"}
                      />
                    }
                    link={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("/dashboard/create-project" as const)
                        : ("/dashboard" as const)
                    }
                    showEndIcon={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zAw3H
                      )}
                    >
                      {"Get Started for Free"}
                    </div>
                  </Button>
                </div>
              </div>

              {true ? (
                <div className={classNames(projectcss.all, sty.columns___2T7)}>
                  <div
                    className={classNames(projectcss.all, sty.column__jKRkm)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__zHtU4
                      )}
                    >
                      {"Enterprise as Code"}
                    </h2>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___50Hng
                      )}
                    >
                      {
                        "Bringing infrastructure as code, application life cycle and identity management at scale. Develop custom automations that accelerate and enable your existing teams."
                      }
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__q4FcS)}
                  >
                    <Reveal
                      className={classNames(
                        "__wab_instance",
                        sty.reveal___3Pnep
                      )}
                      direction={"right" as const}
                      triggerOnce={false}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__dPbnz)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/new_fathym_com/images/enterpriseAsCodepng3.png",
                          fullWidth: 1120,
                          fullHeight: 670,
                          aspectRatio: undefined
                        }}
                      />
                    </Reveal>
                  </div>
                </div>
              ) : null}
              {true ? (
                <div className={classNames(projectcss.all, sty.columns__zUMn)}>
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.column___43Oze)}
                    >
                      <Reveal
                        className={classNames(
                          "__wab_instance",
                          sty.reveal__yy6Ri
                        )}
                        direction={"left" as const}
                        triggerOnce={false}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__jpixk)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/new_fathym_com/images/accelerateInnovationpng2.png",
                            fullWidth: 517,
                            fullHeight: 308,
                            aspectRatio: undefined
                          }}
                        />
                      </Reveal>

                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : true
                      ) ? (
                        <Reveal
                          className={classNames(
                            "__wab_instance",
                            sty.reveal__hiKtb
                          )}
                          direction={"left" as const}
                          triggerOnce={false}
                        >
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : true
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___0NvbY
                              )}
                            >
                              {"Enter some text"}
                            </div>
                          ) : null}
                        </Reveal>
                      ) : null}
                    </div>
                  ) : null}

                  <div className={classNames(projectcss.all, sty.column__pAtk)}>
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__rutxy
                      )}
                    >
                      {"Accelerate Innovation"}
                    </h2>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__abs3
                      )}
                    >
                      {
                        "Fathym enhances your development workflow so your resources can can focus on the customer. Accelerate internal innovation and streamline customer engagement."
                      }
                    </div>
                  </div>
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <Reveal
                  className={classNames("__wab_instance", sty.reveal__mikK)}
                  direction={"left" as const}
                  triggerOnce={false}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__kPgMy)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/new_fathym_com/images/accelerateInnovationpng2.png",
                        fullWidth: 517,
                        fullHeight: 308,
                        aspectRatio: undefined
                      }}
                    />
                  ) : null}
                </Reveal>
              ) : null}
              {true ? (
                <div className={classNames(projectcss.all, sty.columns__k1C2)}>
                  <div
                    className={classNames(projectcss.all, sty.column__xTEgk)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__agnt9
                      )}
                    >
                      {"Enterprise Whitelabels"}
                    </h2>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xazMz
                      )}
                    >
                      {
                        "Enable new lines of business, migrate your legacy solutions, and advance your technology today. Flashup a website in mere minutes with plug-and-play open-source apps."
                      }
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column___7ISnn)}
                  >
                    <Reveal
                      className={classNames(
                        "__wab_instance",
                        sty.reveal___5Znie
                      )}
                      direction={"right" as const}
                      triggerOnce={false}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__izKaW)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/new_fathym_com/images/enterpriseWhitelabelspng.png",
                          fullWidth: 741,
                          fullHeight: 439,
                          aspectRatio: undefined
                        }}
                      />
                    </Reveal>
                  </div>
                </div>
              ) : null}
            </p.Stack>
          </div>

          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"foreground3"}
              data-plasmic-override={overrides.foreground3}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground3)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__oWrCb)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__xOoL4)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__jt1Vg
                    )}
                  >
                    {"Why deploy with Fathym?"}
                  </h2>
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uQMzc
                  )}
                >
                  {
                    "Fathym's powerful micro-frontends allow work to be divided and conquered concurrently. Virtual developers handle the heavy lifting of the hosting and devops automation, saving both time and money. Plus, the ability to use multiple frameworks!\n\nDiscover new ways to maximize resources and knowledge from your team with your code, low code, and no code tools. Harness solutions from the open source universe or developed by your team."
                  }
                </div>
              </p.Stack>

              <div className={classNames(projectcss.all, sty.columns__gf2Th)}>
                <div className={classNames(projectcss.all, sty.column__kSebe)}>
                  <Button
                    className={classNames("__wab_instance", sty.button___53Ho)}
                    color={"blue" as const}
                    link={"/dashboard" as const}
                  >
                    {"Get Started for Free"}
                  </Button>
                </div>
              </div>
            </p.Stack>
          </section>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__pJx7U)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__qDow8)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__pPuq2)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qtqdJ)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__snyjG
                        )}
                      >
                        {"Pricing plans"}
                      </div>
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___6AUcC)}
                  >
                    <PriceCard
                      action={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__iAwyn
                          )}
                        >
                          {"Start for free"}
                        </div>
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.priceCard__aUgV4
                      )}
                      description={
                        <React.Fragment>
                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp__n9Vy3
                            )}
                            description={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__zhSgG
                                )}
                              >
                                {"Unlimited Projects"}
                              </div>
                            }
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__xun1P
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />

                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp__ceq4N
                            )}
                            description={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___7OoDv
                                )}
                              >
                                {"Team Social Feed"}
                              </div>
                            }
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__fhNeA
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />

                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp___52U
                            )}
                            description={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___5Bl0
                                )}
                              >
                                {"Deploy any Version"}
                              </div>
                            }
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__ctAHy
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />

                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp__lKorr
                            )}
                            description={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__cuk2R
                                )}
                              >
                                {"Custom Domain"}
                              </div>
                            }
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__hjwzf
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />

                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp__muGj5
                            )}
                            description={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__mApGd
                                )}
                              >
                                {"Free SSL"}
                              </div>
                            }
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___8Wc2F
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />
                        </React.Fragment>
                      }
                      dollars={"0"}
                    />

                    <PriceCard
                      action={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dXfb8
                          )}
                        >
                          {"Buy Personal"}
                        </div>
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.priceCard__v6Ai5
                      )}
                      description={
                        <React.Fragment>
                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp__vHwYz
                            )}
                            description={"Starter plan, plus:"}
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___15BRx
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />

                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp__vGtWy
                            )}
                            description={"Single Sign-on and Access Control"}
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__hhg0T
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />

                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp__yuEoS
                            )}
                            description={"Application  Modifiers"}
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__prUxT
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />

                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp__x6Xux
                            )}
                            description={"Server-less Functions"}
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___5TKlf
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />
                        </React.Fragment>
                      }
                      dollars={"8"}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zZvk0
                          )}
                        >
                          {"personal"}
                        </div>
                      }
                    />

                    <PriceCard
                      action={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___3QW
                          )}
                        >
                          {"Buy Pro"}
                        </div>
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.priceCard__o8PWf
                      )}
                      description={
                        <React.Fragment>
                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp___64S9L
                            )}
                            description={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__dstt6
                                )}
                              >
                                {"Personal plan, plus:"}
                              </div>
                            }
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__imvza
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />

                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp__vd8AV
                            )}
                            description={"Branded Custom Single Sign-on"}
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__ztwK6
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />

                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp__bXfxm
                            )}
                            description={"Affiliate White-labeling"}
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__tqG1K
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />

                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp__ipej
                            )}
                            description={"Priority Support"}
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__hjw7M
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />
                        </React.Fragment>
                      }
                      dollars={"30"}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__i2KEp
                          )}
                        >
                          {"pro"}
                        </div>
                      }
                    />

                    <PriceCard
                      action={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__r5SjT
                          )}
                        >
                          {"Buy Business"}
                        </div>
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.priceCard__uZdi7
                      )}
                      description={
                        <React.Fragment>
                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp___3QnG
                            )}
                            description={"Pro plan, plus:"}
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__ivO0J
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />

                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp__xo6Lk
                            )}
                            description={"Customer Licensing Tools"}
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__dBliO
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />

                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp__kx9Lm
                            )}
                            description={"Enterprise White Labeling"}
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__emzSf
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />

                          <ValueProp
                            className={classNames(
                              "__wab_instance",
                              sty.valueProp___0EluE
                            )}
                            description={"Cloud Cost Management"}
                            flatIcon={true}
                            icon={
                              <CheckIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___7E1Rg
                                )}
                                role={"img"}
                              />
                            }
                            noTitle={true}
                          />
                        </React.Fragment>
                      }
                      dollars={"99"}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aKSr
                          )}
                        >
                          {"business"}
                        </div>
                      }
                    />
                  </p.Stack>
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}
          {true ? (
            <FathymFooter
              data-plasmic-name={"fathymFooter"}
              data-plasmic-override={overrides.fathymFooter}
              className={classNames("__wab_instance", sty.fathymFooter)}
            />
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "learnMore",
    "section",
    "foreground3",
    "fathymFooter"
  ],
  navbar: ["navbar"],
  learnMore: ["learnMore"],
  section: ["section", "foreground3"],
  foreground3: ["foreground3"],
  fathymFooter: ["fathymFooter"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  learnMore: "a";
  section: "section";
  foreground3: "div";
  fathymFooter: typeof FathymFooter;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepageVariant4Test__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepageVariant4Test__VariantsArgs;
    args?: PlasmicHomepageVariant4Test__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepageVariant4Test__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepageVariant4Test__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepageVariant4Test__ArgProps,
          internalVariantPropNames: PlasmicHomepageVariant4Test__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepageVariant4Test__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepageVariant4Test";
  } else {
    func.displayName = `PlasmicHomepageVariant4Test.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepageVariant4Test = Object.assign(
  // Top-level PlasmicHomepageVariant4Test renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    learnMore: makeNodeComponent("learnMore"),
    section: makeNodeComponent("section"),
    foreground3: makeNodeComponent("foreground3"),
    fathymFooter: makeNodeComponent("fathymFooter"),

    // Metadata about props expected for PlasmicHomepageVariant4Test
    internalVariantProps: PlasmicHomepageVariant4Test__VariantProps,
    internalArgProps: PlasmicHomepageVariant4Test__ArgProps
  }
);

export default PlasmicHomepageVariant4Test;
/* prettier-ignore-end */
